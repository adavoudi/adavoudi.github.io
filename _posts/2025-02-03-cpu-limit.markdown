---
layout: post
title:  "Simulate CPU Utilization with `stress` and `cpulimit`"
date:   2025-02-03 10:00:00 +0100
categories: cpulimit stress
excerpt: Simulating precise CPU utilization is essential for testing applications and systems under controlled conditions. For example, when evaluating system performance or auto-scaling behavior, you may want to set CPU usage to a specific percentage. This post introduces a Python script that leverages the `stress` tool to achieve this, offering a flexible way to simulate exact CPU loads.
cover: /assets/cpu_utilization.png
---

Simulating precise CPU utilization is essential for testing applications and systems under controlled conditions. For example, when evaluating system performance or auto-scaling behavior, you may want to set CPU usage to a specific percentage. This post introduces a Python script that leverages the `stress` tool to achieve this, offering a flexible way to simulate exact CPU loads.

![](/assets/cpu_utilization.png)

## Prerequisites

Before running the script, ensure that you have the necessary tools installed:

```bash
sudo apt update
sudo apt install stress
```

The `stress` tool allows us to generate CPU load, while the Python script manages the simulation process.

## The Python Script

The script below:
1. Generates CPU load using `stress`.
2. Accepts user input for CPU percentage and duration.
3. Dynamically adjusts the number of CPU cores used based on the desired percentage.

```python
# Import required libraries
import subprocess
import sys
import os

def calculate_cpu_cores(percent):
    """
    Calculate the number of CPU cores to use based on the desired percentage.
    
    Args:
        percent (int): Target CPU utilization percentage (1-100)
    
    Returns:
        int: Number of CPU cores to use
    """
    total_cpus = os.cpu_count()
    return max(1, round((percent / 100) * total_cpus))

def set_cpu_utilization(percent, seconds):
    """
    Simulate specific CPU utilization using the `stress` tool.
    
    Args:
        percent (int): Target CPU utilization percentage (1-100)
        seconds (int): Duration of the stress test in seconds
    """
    try:
        # Calculate the number of CPU cores to use
        cpu_cores = calculate_cpu_cores(percent)
        
        # Start stress process to generate CPU load
        stress_process = subprocess.Popen(
            ["stress", "--cpu", str(cpu_cores), "--quiet", "--timeout", str(seconds)]
        )
        
        print(f"Simulating {percent}% CPU utilization using {cpu_cores} core(s) for {seconds} seconds.")
        stress_process.wait()  # Wait for stress process to complete
        
    except KeyboardInterrupt:
        # Handle manual interruption gracefully
        stress_process.terminate()
        stress_process.wait()
        print("Processes stopped.")

if __name__ == "__main__":
    # Validate command-line arguments
    if len(sys.argv) != 3:
        print("Usage: python set_cpu_utilization.py <cpu_percent> <seconds>")
        sys.exit(1)
        
    try:
        percent = int(sys.argv[1])
        seconds = int(sys.argv[2])
        
        if percent < 1 or percent > 100:
            raise ValueError("CPU percent must be between 1 and 100.")
            
    except ValueError:
        print("Error: Invalid input values")
        sys.exit(1)
        
    set_cpu_utilization(percent, seconds)
```

## How It Works

- The script takes two command-line arguments:
  - CPU usage percentage (1-100).
  - Duration (in seconds).
- It calculates the number of CPU cores to use based on the desired percentage.
- It spawns a `stress` process to generate the specified CPU load.
- It waits for the process to complete before exiting.

## Running the Script

To run the script, use:

```bash
python set_cpu_utilization.py 50 10
```

This will simulate 50% CPU utilization for 10 seconds.
